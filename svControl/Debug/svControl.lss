
svControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000420  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000100f  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009fb  00000000  00000000  00001533  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ac  00000000  00000000  00001f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000025dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ce  00000000  00000000  00002654  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008ac  00000000  00000000  00002b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000033ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <main>
  c4:	0c 94 0e 02 	jmp	0x41c	; 0x41c <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <init_machine>:
#define MAGN_KEY_VAC PC1  //Chave magnética de VÁCUO
#define RESISTENCE PC0    //Resistência


void init_machine(void)
{
  cc:	23 e0       	ldi	r18, 0x03	; 3
  ce:	30 e0       	ldi	r19, 0x00	; 0
    set_Bit(PORTB, LED_WB1);
    set_Bit(PORTB, LED_WB2);
    set_Bit(PORTB, LED_WB3);
    set_Bit(PORTB, LED_WB4);
    _delay_ms(100);
    clp_Bit(PORTB, LED_INIT);
  d0:	70 e1       	ldi	r23, 0x10	; 16
    clp_Bit(PORTB, LED_WB1);
  d2:	61 e0       	ldi	r22, 0x01	; 1
    clp_Bit(PORTB, LED_WB2);
  d4:	52 e0       	ldi	r21, 0x02	; 2
    clp_Bit(PORTB, LED_WB3);
  d6:	44 e0       	ldi	r20, 0x04	; 4
    clp_Bit(PORTB, LED_WB4);
  d8:	98 e0       	ldi	r25, 0x08	; 8

void init_machine(void)
{
  for (int i=0; i<3; i++)
  {
    set_Bit(PORTB, LED_INIT);
  da:	2c 9a       	sbi	0x05, 4	; 5
    set_Bit(PORTB, LED_WB1);
  dc:	28 9a       	sbi	0x05, 0	; 5
    set_Bit(PORTB, LED_WB2);
  de:	29 9a       	sbi	0x05, 1	; 5
    set_Bit(PORTB, LED_WB3);
  e0:	2a 9a       	sbi	0x05, 2	; 5
    set_Bit(PORTB, LED_WB4);
  e2:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	e1 ee       	ldi	r30, 0xE1	; 225
  e8:	f4 e0       	ldi	r31, 0x04	; 4
  ea:	81 50       	subi	r24, 0x01	; 1
  ec:	e0 40       	sbci	r30, 0x00	; 0
  ee:	f0 40       	sbci	r31, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <init_machine+0x1e>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <init_machine+0x28>
  f4:	00 00       	nop
    _delay_ms(100);
    clp_Bit(PORTB, LED_INIT);
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	87 27       	eor	r24, r23
  fa:	85 b9       	out	0x05, r24	; 5
    clp_Bit(PORTB, LED_WB1);
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	86 27       	eor	r24, r22
 100:	85 b9       	out	0x05, r24	; 5
    clp_Bit(PORTB, LED_WB2);
 102:	85 b1       	in	r24, 0x05	; 5
 104:	85 27       	eor	r24, r21
 106:	85 b9       	out	0x05, r24	; 5
    clp_Bit(PORTB, LED_WB3);
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	84 27       	eor	r24, r20
 10c:	85 b9       	out	0x05, r24	; 5
    clp_Bit(PORTB, LED_WB4);
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	89 27       	eor	r24, r25
 112:	85 b9       	out	0x05, r24	; 5
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	e1 ee       	ldi	r30, 0xE1	; 225
 118:	f4 e0       	ldi	r31, 0x04	; 4
 11a:	81 50       	subi	r24, 0x01	; 1
 11c:	e0 40       	sbci	r30, 0x00	; 0
 11e:	f0 40       	sbci	r31, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <init_machine+0x4e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <init_machine+0x58>
 124:	00 00       	nop
 126:	21 50       	subi	r18, 0x01	; 1
 128:	31 09       	sbc	r19, r1
#define RESISTENCE PC0    //Resistência


void init_machine(void)
{
  for (int i=0; i<3; i++)
 12a:	b9 f6       	brne	.-82     	; 0xda <init_machine+0xe>
    clp_Bit(PORTB, LED_WB3);
    clp_Bit(PORTB, LED_WB4);
    _delay_ms(100);
  }
  
}
 12c:	08 95       	ret

0000012e <my_delay_ms>:
void my_delay_ms(int ms)
{
  while (0 < ms)
 12e:	18 16       	cp	r1, r24
 130:	19 06       	cpc	r1, r25
 132:	44 f4       	brge	.+16     	; 0x144 <my_delay_ms+0x16>
 134:	ef e9       	ldi	r30, 0x9F	; 159
 136:	ff e0       	ldi	r31, 0x0F	; 15
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <my_delay_ms+0xa>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <my_delay_ms+0x10>
 13e:	00 00       	nop
  {
    _delay_ms(1);
    --ms;
 140:	01 97       	sbiw	r24, 0x01	; 1
  }
  
}
void my_delay_ms(int ms)
{
  while (0 < ms)
 142:	c1 f7       	brne	.-16     	; 0x134 <my_delay_ms+0x6>
 144:	08 95       	ret

00000146 <exc_vacuo>:
  }
}

void exc_vacuo()
{
  if (test_Bit(PIND, VACUOSTAT)) // testa se tem vacuo
 146:	4c 9b       	sbis	0x09, 4	; 9
 148:	05 c0       	rjmp	.+10     	; 0x154 <exc_vacuo+0xe>
  {
    set_Bit(PORTB, PUMP_VACUUM); // se não, seta bomba de vácuo
 14a:	2d 9a       	sbi	0x05, 5	; 5
    if (!test_Bit(PIND, VACUOSTAT)) // testa dentro do if se tem vácuo
 14c:	4c 99       	sbic	0x09, 4	; 9
 14e:	04 c0       	rjmp	.+8      	; 0x158 <exc_vacuo+0x12>
    {
      clr_Bit(PORTB, PUMP_VACUUM); // se sim desliga bomba
 150:	2d 98       	cbi	0x05, 5	; 5
 152:	08 95       	ret
    }
  }
  else
  {
    asm("JMP 0");// REINICIA
 154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 158:	08 95       	ret

0000015a <proc_selar>:
  }
}

void proc_selar(int time_sel, int time_sleep)
{
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	8b 01       	movw	r16, r22
  set_Bit(PORTC, MAGN_KEY_VAC); // Libera dulto de vácuo
 164:	41 9a       	sbi	0x08, 1	; 8
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	39 e6       	ldi	r19, 0x69	; 105
 16a:	48 e1       	ldi	r20, 0x18	; 24
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	30 40       	sbci	r19, 0x00	; 0
 170:	40 40       	sbci	r20, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <proc_selar+0x12>
 174:	00 c0       	rjmp	.+0      	; 0x176 <proc_selar+0x1c>
 176:	00 00       	nop
  _delay_ms(500);
  set_Bit(PORTC, MAGN_KEY_SEL); // Avança para selar
 178:	42 9a       	sbi	0x08, 2	; 8
  my_delay_ms(time_sel*1000);
 17a:	c8 ee       	ldi	r28, 0xE8	; 232
 17c:	d3 e0       	ldi	r29, 0x03	; 3
 17e:	9c 01       	movw	r18, r24
 180:	2c 9f       	mul	r18, r28
 182:	c0 01       	movw	r24, r0
 184:	2d 9f       	mul	r18, r29
 186:	90 0d       	add	r25, r0
 188:	3c 9f       	mul	r19, r28
 18a:	90 0d       	add	r25, r0
 18c:	11 24       	eor	r1, r1
 18e:	0e 94 97 00 	call	0x12e	; 0x12e <my_delay_ms>
  clr_Bit(PORTC, RESISTENCE);
 192:	40 98       	cbi	0x08, 0	; 8
  my_delay_ms(time_sleep*1000);
 194:	0c 9f       	mul	r16, r28
 196:	c0 01       	movw	r24, r0
 198:	0d 9f       	mul	r16, r29
 19a:	90 0d       	add	r25, r0
 19c:	1c 9f       	mul	r17, r28
 19e:	90 0d       	add	r25, r0
 1a0:	11 24       	eor	r1, r1
 1a2:	0e 94 97 00 	call	0x12e	; 0x12e <my_delay_ms>
}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	08 95       	ret

000001b0 <main>:

int main(void)
{
	int option;
	option = 0;
	DDRB = 0xFF; // Definindo Todos os pinos do portB como saída
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF; // Definindo Todos os pinos do portC como Saída
 1b4:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00; // Definindo o primeiro nyble do portD como Entrada
 1b6:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF; //PULL- UP  
 1b8:	8b b9       	out	0x0b, r24	; 11
	
	init_machine();
 1ba:	0e 94 66 00 	call	0xcc	; 0xcc <init_machine>


int main(void)
{
	int option;
	option = 0;
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
						_delay_ms(200);
						clr_Bit(PORTB, LED_WB1);
						_delay_ms(200);
					}
					while(!test_Bit(PIND, AND_COURSE));
					asm("JMP 0");
 1c2:	ee 24       	eor	r14, r14
 1c4:	e3 94       	inc	r14
 1c6:	f1 2c       	mov	r15, r1
						_delay_ms(200);
						clr_Bit(PORTB, LED_WB2);
						_delay_ms(200);
					}
					while(!test_Bit(PIND, AND_COURSE));
					asm("JMP 0");
 1c8:	d2 e0       	ldi	r29, 0x02	; 2
 1ca:	c0 e0       	ldi	r28, 0x00	; 0
						_delay_ms(200);
						clr_Bit(PORTB, LED_WB4);
						_delay_ms(200);
					}
					while(!test_Bit(PIND, AND_COURSE));
					asm("JMP 0");
 1cc:	04 e0       	ldi	r16, 0x04	; 4
 1ce:	10 e0       	ldi	r17, 0x00	; 0
 1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <main+0x38>
 1d2:	8e 2d       	mov	r24, r14
 1d4:	9f 2d       	mov	r25, r15
 1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <main+0x38>
 1d8:	8d 2f       	mov	r24, r29
 1da:	9c 2f       	mov	r25, r28
 1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <main+0x38>
 1de:	83 e0       	ldi	r24, 0x03	; 3
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <main+0x38>
 1e4:	80 2f       	mov	r24, r16
 1e6:	91 2f       	mov	r25, r17
	
	
    while (1) 
    {
    // Em cada IF verifica qual botão foi pressionado
		if (!test_Bit(PIND, WHIGHT_B1))
 1e8:	48 99       	sbic	0x09, 0	; 9
 1ea:	09 c0       	rjmp	.+18     	; 0x1fe <main+0x4e>
		{
			while(!test_Bit(PIND, WHIGHT_B1));
 1ec:	48 9b       	sbis	0x09, 0	; 9
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <main+0x3c>
 1f0:	8f e3       	ldi	r24, 0x3F	; 63
 1f2:	9c e9       	ldi	r25, 0x9C	; 156
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0x44>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x4a>
 1fa:	00 00       	nop
 1fc:	34 c0       	rjmp	.+104    	; 0x266 <main+0xb6>
			 _delay_ms(10);
			option = 1;
		}
		else if (!test_Bit(PIND, WHIGHT_B2))
 1fe:	49 99       	sbic	0x09, 1	; 9
 200:	09 c0       	rjmp	.+18     	; 0x214 <main+0x64>
		{
			while(!test_Bit(PIND, WHIGHT_B2));
 202:	49 9b       	sbis	0x09, 1	; 9
 204:	fe cf       	rjmp	.-4      	; 0x202 <main+0x52>
 206:	8f e3       	ldi	r24, 0x3F	; 63
 208:	9c e9       	ldi	r25, 0x9C	; 156
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <main+0x5a>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x60>
 210:	00 00       	nop
 212:	5f c0       	rjmp	.+190    	; 0x2d2 <main+0x122>
			_delay_ms(10);
			option = 2;
		}
		else if (!test_Bit(PIND, WHIGHT_B3))
 214:	4a 99       	sbic	0x09, 2	; 9
 216:	09 c0       	rjmp	.+18     	; 0x22a <main+0x7a>
		{
			while(!test_Bit(PIND, WHIGHT_B3));
 218:	4a 9b       	sbis	0x09, 2	; 9
 21a:	fe cf       	rjmp	.-4      	; 0x218 <main+0x68>
 21c:	8f e3       	ldi	r24, 0x3F	; 63
 21e:	9c e9       	ldi	r25, 0x9C	; 156
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <main+0x70>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x76>
 226:	00 00       	nop
 228:	8a c0       	rjmp	.+276    	; 0x33e <main+0x18e>
			_delay_ms(10);
			option = 3;
		}
		else if (!test_Bit(PIND, WHIGHT_B4))
 22a:	4b 99       	sbic	0x09, 3	; 9
 22c:	09 c0       	rjmp	.+18     	; 0x240 <main+0x90>
		{
			while(!test_Bit(PIND, WHIGHT_B4));
 22e:	4b 9b       	sbis	0x09, 3	; 9
 230:	fe cf       	rjmp	.-4      	; 0x22e <main+0x7e>
 232:	8f e3       	ldi	r24, 0x3F	; 63
 234:	9c e9       	ldi	r25, 0x9C	; 156
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <main+0x86>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x8c>
 23c:	00 00       	nop
 23e:	b5 c0       	rjmp	.+362    	; 0x3aa <main+0x1fa>
			_delay_ms(10);
			option = 4;
		}
	
		switch (option)
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	91 05       	cpc	r25, r1
 244:	09 f4       	brne	.+2      	; 0x248 <main+0x98>
 246:	45 c0       	rjmp	.+138    	; 0x2d2 <main+0x122>
 248:	2c f4       	brge	.+10     	; 0x254 <main+0xa4>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	91 05       	cpc	r25, r1
 24e:	09 f0       	breq	.+2      	; 0x252 <main+0xa2>
 250:	e2 c0       	rjmp	.+452    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 252:	09 c0       	rjmp	.+18     	; 0x266 <main+0xb6>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	91 05       	cpc	r25, r1
 258:	09 f4       	brne	.+2      	; 0x25c <main+0xac>
 25a:	71 c0       	rjmp	.+226    	; 0x33e <main+0x18e>
 25c:	84 30       	cpi	r24, 0x04	; 4
 25e:	91 05       	cpc	r25, r1
 260:	09 f0       	breq	.+2      	; 0x264 <main+0xb4>
 262:	d9 c0       	rjmp	.+434    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 264:	a2 c0       	rjmp	.+324    	; 0x3aa <main+0x1fa>
		{
			case 1:
				//
				set_Bit(PORTB, LED_WB1);
 266:	28 9a       	sbi	0x05, 0	; 5
				if (!test_Bit(PIND, AND_COURSE)) //testa se o pedal foi acionado
 268:	4d 99       	sbic	0x09, 5	; 9
 26a:	b3 cf       	rjmp	.-154    	; 0x1d2 <main+0x22>
				{
					while(!test_Bit(PIND, AND_COURSE)); // aguarda o botão ser solto
 26c:	4d 9b       	sbis	0x09, 5	; 9
 26e:	fe cf       	rjmp	.-4      	; 0x26c <main+0xbc>
					//_delay_ms(10);
					set_Bit(PORTC, RESISTENCE); // se sim liga a resistência
 270:	40 9a       	sbi	0x08, 0	; 8
 272:	9f ef       	ldi	r25, 0xFF	; 255
 274:	29 ef       	ldi	r18, 0xF9	; 249
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	91 50       	subi	r25, 0x01	; 1
 27a:	20 40       	sbci	r18, 0x00	; 0
 27c:	30 40       	sbci	r19, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0xc8>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0xd2>
 282:	00 00       	nop
					_delay_ms(20);
					exc_vacuo();  // inicia o processo de vácuo
 284:	0e 94 a3 00 	call	0x146	; 0x146 <exc_vacuo>
					proc_selar(10, 10 );
 288:	6a e0       	ldi	r22, 0x0A	; 10
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	8a e0       	ldi	r24, 0x0A	; 10
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 ad 00 	call	0x15a	; 0x15a <proc_selar>
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	90 e0       	ldi	r25, 0x00	; 0
				
					// pisca o lede indicando fim do processo.
					for (int i=0; i<3; i++)
					{
						set_Bit(PORTB, LED_WB1);
 298:	28 9a       	sbi	0x05, 0	; 5
 29a:	4f ef       	ldi	r20, 0xFF	; 255
 29c:	23 ec       	ldi	r18, 0xC3	; 195
 29e:	39 e0       	ldi	r19, 0x09	; 9
 2a0:	41 50       	subi	r20, 0x01	; 1
 2a2:	20 40       	sbci	r18, 0x00	; 0
 2a4:	30 40       	sbci	r19, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <main+0xf0>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <main+0xfa>
 2aa:	00 00       	nop
						_delay_ms(200);
						clr_Bit(PORTB, LED_WB1);
 2ac:	28 98       	cbi	0x05, 0	; 5
 2ae:	4f ef       	ldi	r20, 0xFF	; 255
 2b0:	23 ec       	ldi	r18, 0xC3	; 195
 2b2:	39 e0       	ldi	r19, 0x09	; 9
 2b4:	41 50       	subi	r20, 0x01	; 1
 2b6:	20 40       	sbci	r18, 0x00	; 0
 2b8:	30 40       	sbci	r19, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0x104>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x10e>
 2be:	00 00       	nop
 2c0:	01 97       	sbiw	r24, 0x01	; 1
					_delay_ms(20);
					exc_vacuo();  // inicia o processo de vácuo
					proc_selar(10, 10 );
				
					// pisca o lede indicando fim do processo.
					for (int i=0; i<3; i++)
 2c2:	51 f7       	brne	.-44     	; 0x298 <main+0xe8>
						set_Bit(PORTB, LED_WB1);
						_delay_ms(200);
						clr_Bit(PORTB, LED_WB1);
						_delay_ms(200);
					}
					while(!test_Bit(PIND, AND_COURSE));
 2c4:	4d 9b       	sbis	0x09, 5	; 9
 2c6:	fe cf       	rjmp	.-4      	; 0x2c4 <main+0x114>
					asm("JMP 0");
 2c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 2cc:	8e 2d       	mov	r24, r14
 2ce:	9f 2d       	mov	r25, r15
 2d0:	8b cf       	rjmp	.-234    	; 0x1e8 <main+0x38>
				}*/
			
			break;
		
			case 2:
				set_Bit(PORTB, LED_WB2);
 2d2:	29 9a       	sbi	0x05, 1	; 5
				if (!test_Bit(PIND, AND_COURSE)) //testa se o pedal foi acionado
 2d4:	4d 99       	sbic	0x09, 5	; 9
 2d6:	80 cf       	rjmp	.-256    	; 0x1d8 <main+0x28>
				{
					while(!test_Bit(PIND, AND_COURSE)); // aguarda o botão ser solto
 2d8:	4d 9b       	sbis	0x09, 5	; 9
 2da:	fe cf       	rjmp	.-4      	; 0x2d8 <main+0x128>
					//_delay_ms(10);
					set_Bit(PORTC, RESISTENCE); // se sim liga a resistência
 2dc:	40 9a       	sbi	0x08, 0	; 8
 2de:	4f ef       	ldi	r20, 0xFF	; 255
 2e0:	89 ef       	ldi	r24, 0xF9	; 249
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	41 50       	subi	r20, 0x01	; 1
 2e6:	80 40       	sbci	r24, 0x00	; 0
 2e8:	90 40       	sbci	r25, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x134>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x13e>
 2ee:	00 00       	nop
					_delay_ms(20);
					exc_vacuo();  // inicia o processo de vácuo
 2f0:	0e 94 a3 00 	call	0x146	; 0x146 <exc_vacuo>
					proc_selar(5, 5 );
 2f4:	65 e0       	ldi	r22, 0x05	; 5
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 ad 00 	call	0x15a	; 0x15a <proc_selar>
 300:	83 e0       	ldi	r24, 0x03	; 3
 302:	90 e0       	ldi	r25, 0x00	; 0
				
					// pisca o lede indicando fim do processo.
					for (int i=0; i<3; i++)
					{
						set_Bit(PORTB, LED_WB2);
 304:	29 9a       	sbi	0x05, 1	; 5
 306:	2f ef       	ldi	r18, 0xFF	; 255
 308:	33 ec       	ldi	r19, 0xC3	; 195
 30a:	49 e0       	ldi	r20, 0x09	; 9
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	30 40       	sbci	r19, 0x00	; 0
 310:	40 40       	sbci	r20, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <main+0x15c>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0x166>
 316:	00 00       	nop
						_delay_ms(200);
						clr_Bit(PORTB, LED_WB2);
 318:	29 98       	cbi	0x05, 1	; 5
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	33 ec       	ldi	r19, 0xC3	; 195
 31e:	49 e0       	ldi	r20, 0x09	; 9
 320:	21 50       	subi	r18, 0x01	; 1
 322:	30 40       	sbci	r19, 0x00	; 0
 324:	40 40       	sbci	r20, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <main+0x170>
 328:	00 c0       	rjmp	.+0      	; 0x32a <main+0x17a>
 32a:	00 00       	nop
 32c:	01 97       	sbiw	r24, 0x01	; 1
					_delay_ms(20);
					exc_vacuo();  // inicia o processo de vácuo
					proc_selar(5, 5 );
				
					// pisca o lede indicando fim do processo.
					for (int i=0; i<3; i++)
 32e:	51 f7       	brne	.-44     	; 0x304 <main+0x154>
						set_Bit(PORTB, LED_WB2);
						_delay_ms(200);
						clr_Bit(PORTB, LED_WB2);
						_delay_ms(200);
					}
					while(!test_Bit(PIND, AND_COURSE));
 330:	4d 9b       	sbis	0x09, 5	; 9
 332:	fe cf       	rjmp	.-4      	; 0x330 <main+0x180>
					asm("JMP 0");
 334:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 338:	8d 2f       	mov	r24, r29
 33a:	9c 2f       	mov	r25, r28
 33c:	55 cf       	rjmp	.-342    	; 0x1e8 <main+0x38>
				}*/
				//
			break;
		
			case 3:
				set_Bit(PORTB, LED_WB3);
 33e:	2a 9a       	sbi	0x05, 2	; 5
				if (!test_Bit(PIND, AND_COURSE)) //testa se o pedal foi acionado
 340:	4d 99       	sbic	0x09, 5	; 9
 342:	4d cf       	rjmp	.-358    	; 0x1de <main+0x2e>
				{
					while(!test_Bit(PIND, AND_COURSE)); // aguarda o botão ser solto
 344:	4d 9b       	sbis	0x09, 5	; 9
 346:	fe cf       	rjmp	.-4      	; 0x344 <main+0x194>
					//_delay_ms(10);
					set_Bit(PORTC, RESISTENCE); // se sim liga a resistência
 348:	40 9a       	sbi	0x08, 0	; 8
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	99 ef       	ldi	r25, 0xF9	; 249
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	81 50       	subi	r24, 0x01	; 1
 352:	90 40       	sbci	r25, 0x00	; 0
 354:	20 40       	sbci	r18, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <main+0x1a0>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0x1aa>
 35a:	00 00       	nop
					_delay_ms(20);
					exc_vacuo();  // inicia o processo de vácuo
 35c:	0e 94 a3 00 	call	0x146	; 0x146 <exc_vacuo>
					proc_selar(3, 3 );
 360:	63 e0       	ldi	r22, 0x03	; 3
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 ad 00 	call	0x15a	; 0x15a <proc_selar>
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	90 e0       	ldi	r25, 0x00	; 0
				
					// pisca o lede indicando fim do processo.
					for (int i=0; i<3; i++)
					{
						set_Bit(PORTB, LED_WB3);
 370:	2a 9a       	sbi	0x05, 2	; 5
 372:	3f ef       	ldi	r19, 0xFF	; 255
 374:	43 ec       	ldi	r20, 0xC3	; 195
 376:	29 e0       	ldi	r18, 0x09	; 9
 378:	31 50       	subi	r19, 0x01	; 1
 37a:	40 40       	sbci	r20, 0x00	; 0
 37c:	20 40       	sbci	r18, 0x00	; 0
 37e:	e1 f7       	brne	.-8      	; 0x378 <main+0x1c8>
 380:	00 c0       	rjmp	.+0      	; 0x382 <main+0x1d2>
 382:	00 00       	nop
						_delay_ms(200);
						clr_Bit(PORTB, LED_WB3);
 384:	2a 98       	cbi	0x05, 2	; 5
 386:	3f ef       	ldi	r19, 0xFF	; 255
 388:	43 ec       	ldi	r20, 0xC3	; 195
 38a:	29 e0       	ldi	r18, 0x09	; 9
 38c:	31 50       	subi	r19, 0x01	; 1
 38e:	40 40       	sbci	r20, 0x00	; 0
 390:	20 40       	sbci	r18, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <main+0x1dc>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x1e6>
 396:	00 00       	nop
 398:	01 97       	sbiw	r24, 0x01	; 1
					_delay_ms(20);
					exc_vacuo();  // inicia o processo de vácuo
					proc_selar(3, 3 );
				
					// pisca o lede indicando fim do processo.
					for (int i=0; i<3; i++)
 39a:	51 f7       	brne	.-44     	; 0x370 <main+0x1c0>
						set_Bit(PORTB, LED_WB3);
						_delay_ms(200);
						clr_Bit(PORTB, LED_WB3);
						_delay_ms(200);
					}
					while(!test_Bit(PIND, AND_COURSE));
 39c:	4d 9b       	sbis	0x09, 5	; 9
 39e:	fe cf       	rjmp	.-4      	; 0x39c <main+0x1ec>
					asm("JMP 0");
 3a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 3a4:	83 e0       	ldi	r24, 0x03	; 3
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	1f cf       	rjmp	.-450    	; 0x1e8 <main+0x38>
				}*/
			//
			break;
		
			case 4:
				set_Bit(PORTB, LED_WB4);
 3aa:	2b 9a       	sbi	0x05, 3	; 5
				if (!test_Bit(PIND, AND_COURSE)) //testa se o pedal foi acionado
 3ac:	4d 99       	sbic	0x09, 5	; 9
 3ae:	1a cf       	rjmp	.-460    	; 0x1e4 <main+0x34>
				{
					while(!test_Bit(PIND, AND_COURSE)); // aguarda o botão ser solto
 3b0:	4d 9b       	sbis	0x09, 5	; 9
 3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <main+0x200>
					//_delay_ms(10);
					set_Bit(PORTC, RESISTENCE); // se sim liga a resistência
 3b4:	40 9a       	sbi	0x08, 0	; 8
 3b6:	3f ef       	ldi	r19, 0xFF	; 255
 3b8:	49 ef       	ldi	r20, 0xF9	; 249
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	31 50       	subi	r19, 0x01	; 1
 3be:	40 40       	sbci	r20, 0x00	; 0
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <main+0x20c>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <main+0x216>
 3c6:	00 00       	nop
					_delay_ms(20);
					exc_vacuo();  // inicia o processo de vácuo
 3c8:	0e 94 a3 00 	call	0x146	; 0x146 <exc_vacuo>
					proc_selar(2, 2 );
 3cc:	6d 2f       	mov	r22, r29
 3ce:	7c 2f       	mov	r23, r28
 3d0:	8d 2f       	mov	r24, r29
 3d2:	9c 2f       	mov	r25, r28
 3d4:	0e 94 ad 00 	call	0x15a	; 0x15a <proc_selar>
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	90 e0       	ldi	r25, 0x00	; 0
				
					// pisca o lede indicando fim do processo.
					for (int i=0; i<3; i++)
					{
						set_Bit(PORTB, LED_WB4);
 3dc:	2b 9a       	sbi	0x05, 3	; 5
 3de:	2f ef       	ldi	r18, 0xFF	; 255
 3e0:	33 ec       	ldi	r19, 0xC3	; 195
 3e2:	49 e0       	ldi	r20, 0x09	; 9
 3e4:	21 50       	subi	r18, 0x01	; 1
 3e6:	30 40       	sbci	r19, 0x00	; 0
 3e8:	40 40       	sbci	r20, 0x00	; 0
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <main+0x234>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0x23e>
 3ee:	00 00       	nop
						_delay_ms(200);
						clr_Bit(PORTB, LED_WB4);
 3f0:	2b 98       	cbi	0x05, 3	; 5
 3f2:	2f ef       	ldi	r18, 0xFF	; 255
 3f4:	33 ec       	ldi	r19, 0xC3	; 195
 3f6:	49 e0       	ldi	r20, 0x09	; 9
 3f8:	21 50       	subi	r18, 0x01	; 1
 3fa:	30 40       	sbci	r19, 0x00	; 0
 3fc:	40 40       	sbci	r20, 0x00	; 0
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <main+0x248>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 402:	00 00       	nop
 404:	01 97       	sbiw	r24, 0x01	; 1
					_delay_ms(20);
					exc_vacuo();  // inicia o processo de vácuo
					proc_selar(2, 2 );
				
					// pisca o lede indicando fim do processo.
					for (int i=0; i<3; i++)
 406:	51 f7       	brne	.-44     	; 0x3dc <main+0x22c>
						set_Bit(PORTB, LED_WB4);
						_delay_ms(200);
						clr_Bit(PORTB, LED_WB4);
						_delay_ms(200);
					}
					while(!test_Bit(PIND, AND_COURSE));
 408:	4d 9b       	sbis	0x09, 5	; 9
 40a:	fe cf       	rjmp	.-4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
					asm("JMP 0");
 40c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 410:	80 2f       	mov	r24, r16
 412:	91 2f       	mov	r25, r17
 414:	e9 ce       	rjmp	.-558    	; 0x1e8 <main+0x38>
				}*/
			//
			break;
		
			default:
				asm("JMP 0");
 416:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 41a:	e6 ce       	rjmp	.-564    	; 0x1e8 <main+0x38>

0000041c <_exit>:
 41c:	f8 94       	cli

0000041e <__stop_program>:
 41e:	ff cf       	rjmp	.-2      	; 0x41e <__stop_program>
